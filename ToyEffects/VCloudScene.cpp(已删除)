#include <iostream>
#include <ToyEffects/scenes/Skybox/VCloudScene.h>
#include <ToyEffects/scenes/Skybox/shared.h>

using namespace std;


void VCloudScene::cursorPosCallback(double xPos, double yPos) {
    __nahidaPaimonSharedCursorPosCallback(xPos, yPos);
}

void VCloudScene::activeKeyInputProcessor(GLFWwindow* window, float deltaTime) {
    __nahidaPaimonSharedActiveKeyInputProcessor(window, deltaTime);

}


VCloudScene::~VCloudScene() {
    if (this->pSkybox) {
        delete this->pSkybox;
        this->pSkybox = nullptr;
    }

    
  /*  glDeleteFramebuffers(1, &fbo);*/
}

void VCloudScene::tick(float deltaT) {
   
}


void VCloudScene::render() {
    auto& runtime = AppRuntime::getInstance();

   
    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // todo: ToyGraph 封装应该调整以适配后处理模式。


}


VCloudScene::VCloudScene() {
    //TODO:add skybox
    
    //init camera
    this->camera = new Camera;
    camera->setPosition(glm::vec3(0, 0, 3));
    camera->setYaw(-84.0f);
    camera->setPitch(23.8f);

    //init a square
    GLfloat vertices[] = {
             -1.0f, -1.0f,
       -1.0f,  3.0f,
        3.0f, -1.0f,
    };
    
    glGenVertexArrays(1, &this->VAO);
    glGenBuffers(1, &VBO);
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), (GLvoid*)0);
    glEnableVertexAttribArray(0);

   

}




